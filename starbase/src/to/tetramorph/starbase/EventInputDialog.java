/*
 * EventInputDialog.java
 *
 * Created on 2006/07/04, 19:28
 */

package to.tetramorph.starbase;

import to.tetramorph.starbase.formatter.LimitedDocument;
import java.awt.Component;
import java.awt.Dialog;
import java.awt.Frame;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import javax.swing.AbstractAction;
import javax.swing.JOptionPane;
import to.tetramorph.starbase.lib.Transit;
import to.tetramorph.util.ParentWindow;

/**
 * 個人のヒストリー(イベント)の情報を入力するためのダイアログ。
 * @author  大澤義鷹
 */
class EventInputDialog extends javax.swing.JDialog {
    private static Transit event = null;
    /**
     * Creates new form EventInputDialog
     */
    private EventInputDialog(java.awt.Frame parent) {
        super(parent, true);
        initComponents();
        init();
    }
    private EventInputDialog(java.awt.Dialog parent) {
        super(parent, true);
        initComponents();
        init();
    }
    private void init() {
        nameTextField.setDocument(new LimitedDocument(28));
        memoTextField.setDocument(new LimitedDocument(28));
        addWindowListener(new WindowHandler());
        //this.addKeyListener(new KeyHandler());
        ParentWindow.setEscCloseOperation(this,new AbstractAction() {
            public void actionPerformed(ActionEvent evt) {
                aboutButton.doClick();
            }
        });
    }
    //各入力フィールドに初期値をセット(更新作業用)
    private void setTransit(Transit event) {
        timePlacePanel.setDate(event.getCalendar());
        timePlacePanel.setTime(event.getTime());
        timePlacePanel.setPlaceName(event.getPlaceName());
        
        timePlacePanel.setLatitude(event.getLatitude());
        timePlacePanel.setLongitude(event.getLongitude());
        timePlacePanel.setTimeZone(event.getTimeZone());
        nameTextField.setText(event.getName());
        memoTextField.setText(event.getMemo());
        this.event = event;
    }
    /**
     * ダイアログを開いて新規にヒストリーの入力を促す。決定と中止ボタンがあり、
     * 必要なデータが入力された状態で決定が押されるとEventオブジェクトにして返す。
     * 中止が押されたときはnullを返す。
     * @param parent 親となるコンポーネント
     */
    public static Transit showDialog(Component parent,String title) {
        Window window = ParentWindow.getWindowForComponent(parent);
        final EventInputDialog dialog;
        if(window instanceof Frame) {
            dialog = new EventInputDialog((Frame)window);
        } else {
            dialog = new EventInputDialog((Dialog)window);
        }
        if(title != null) dialog.setTitle(title);
        dialog.setComponentOrientation(window.getComponentOrientation());
        dialog.pack();
        dialog.setLocationRelativeTo(window); //親コンポーネントに対してセンタリング
        dialog.setVisible(true);
        return event;
    }
    /**
     * ダイアログを開いて、既存のヒストリーの編集を促す。決定と中止ボタンがあり、
     * 必要なデータが入力された状態で決定が押されると引数で与えたEventオブジェクト
     * に参照書き込みする。
     * @param event 編集するEventオブジェクト
     * @return 戻り値がtrueなら決定ボタンで終了したことを意味し、falseなら中止ボタン
     * が押されて終了したことを意味する。
     */
    public static boolean showDialog(Component parent,Transit event,String title) {
        Window window = ParentWindow.getWindowForComponent(parent);
        final EventInputDialog dialog;
        if(window instanceof Frame) {
            dialog = new EventInputDialog((Frame)window);
        } else {
            dialog = new EventInputDialog((Dialog)window);
        }
        if(title != null) dialog.setTitle(title);
        dialog.setTransit(event);
        dialog.setComponentOrientation(window.getComponentOrientation());
        dialog.pack();
        dialog.setLocationRelativeTo(window); //親コンポーネントに対してセンタリング
        dialog.setVisible(true);
        return dialog.event != null;
    }
    
    private class WindowHandler extends WindowAdapter {
        public void windowClosing(WindowEvent e) {
            event = null;
        }
    }
//  public void addKeyListener(KeyListener l) {
//    acceptButton.addKeyListener(l);
//    aboutButton.addKeyListener(l);
//    timePlacePanel.addKeyListener(l);
//    memoTextField.addKeyListener(l);
//    nameTextField.addKeyListener(l);
//  }
//  //ESCキーでダイアログを閉じるキーハンドラ
//  private class KeyHandler extends KeyAdapter {
//    public void keyPressed(KeyEvent e) {
//      int code = (int)e.getKeyChar();
//      if(code == KeyEvent.VK_ESCAPE) aboutButton.doClick();
//    }
//  }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
  // <editor-fold defaultstate="collapsed" desc=" Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;
    javax.swing.JLabel memoLabel;

    buttonPanel = new javax.swing.JPanel();
    acceptButton = new javax.swing.JButton();
    aboutButton = new javax.swing.JButton();
    mainPanel = new javax.swing.JPanel();
    timePlacePanel = new to.tetramorph.starbase.TimePlacePanel();
    nameLabel = new javax.swing.JLabel();
    nameTextField = new javax.swing.JTextField();
    memoLabel = new javax.swing.JLabel();
    memoTextField = new javax.swing.JTextField();

    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    setTitle("\u30d2\u30b9\u30c8\u30ea\u30fc\u306e\u5165\u529b");
    setResizable(false);
    acceptButton.setMnemonic('Y');
    acceptButton.setText("\u6c7a\u5b9a(Y)");
    acceptButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        acceptButtonActionPerformed(evt);
      }
    });

    buttonPanel.add(acceptButton);

    aboutButton.setMnemonic('N');
    aboutButton.setText("\u4e2d\u6b62(N)");
    aboutButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        aboutButtonActionPerformed(evt);
      }
    });

    buttonPanel.add(aboutButton);

    getContentPane().add(buttonPanel, java.awt.BorderLayout.SOUTH);

    mainPanel.setLayout(new java.awt.GridBagLayout());

    mainPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(8, 8, 1, 8));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.gridheight = 5;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
    mainPanel.add(timePlacePanel, gridBagConstraints);

    nameLabel.setText("\u540d\u524d");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 3);
    mainPanel.add(nameLabel, gridBagConstraints);

    nameTextField.setColumns(12);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    mainPanel.add(nameTextField, gridBagConstraints);

    memoLabel.setText("\u30e1\u30e2");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 3);
    mainPanel.add(memoLabel, gridBagConstraints);

    memoTextField.setColumns(12);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    mainPanel.add(memoTextField, gridBagConstraints);

    getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);

    pack();
  }// </editor-fold>//GEN-END:initComponents
  
  private void aboutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutButtonActionPerformed
      event = null;
      dispose();
  }//GEN-LAST:event_aboutButtonActionPerformed
  
  private void acceptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptButtonActionPerformed
      if(nameTextField.getText().trim().equals("") ||
          timePlacePanel.getDate() == null) {
          JOptionPane.showMessageDialog(this,"名前と日付はかならず入力してください",
              "イベント入力のエラー",JOptionPane.ERROR_MESSAGE);
          return;
      }
      if(event == null) event = new Transit(); //更新のときはnewしない
      event.setName(nameTextField.getText().trim());
      event.setMemo(memoTextField.getText().trim());
      String era = timePlacePanel.getERA();
      event.setDate(timePlacePanel.getDate(),era);
      event.setTime(timePlacePanel.getTime());
      event.setLatitude(timePlacePanel.getLatitude());
      event.setLongitude(timePlacePanel.getLongitude());
      event.setTimeZone(timePlacePanel.getTimeZone());
      event.setPlaceName(timePlacePanel.getPlaceName());
      dispose();
// TODO add your handling code here:
  }//GEN-LAST:event_acceptButtonActionPerformed
  
  
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton aboutButton;
  private javax.swing.JButton acceptButton;
  private javax.swing.JPanel buttonPanel;
  private javax.swing.JPanel mainPanel;
  private javax.swing.JTextField memoTextField;
  private javax.swing.JLabel nameLabel;
  private javax.swing.JTextField nameTextField;
  private to.tetramorph.starbase.TimePlacePanel timePlacePanel;
  // End of variables declaration//GEN-END:variables
  
}
