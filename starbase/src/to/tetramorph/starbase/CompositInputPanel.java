/*
 * NatalInputPanel.java
 *
 * Created on 2006/07/05, 1:18
 */

package to.tetramorph.starbase;

import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.List;
import to.tetramorph.starbase.formatter.LimitedDocument;
import javax.swing.JOptionPane;
import to.tetramorph.starbase.lib.Natal;
import to.tetramorph.starbase.lib.Transit;

/**
 * DataInputDialogにはめこんでつかう部品で、これはネイタルチャートのデータ入力用。
 * 他にもコンポジットやイベントチャート用が用意される予定。
 * かならず抽象クラスのDataTypePanelをextendsしてgetNatalとsetNatalを
 * オーバーライドしていなければならない。
 */
class CompositInputPanel extends AbstractNatalInputPanel {
  private Natal occ;
  private CompositEditPanel compositEditPanel = new CompositEditPanel();

  /** 
   * オブジェクトを作成する。
   */
  public CompositInputPanel() {
    initComponents();
    init();
  }
  //名前、なまえ、メモのTextFieldに文字数制限をかける。
  private void init() {
    nameTextField.setDocument(new LimitedDocument(28));
    kanaTextField.setDocument(new LimitedDocument(28));
    memoTextField.setDocument(new LimitedDocument(28));
    //eventInputPanel.setCompositDesign();
    tabbedPane.addTab("リスト(L)",compositEditPanel);
    tabbedPane.setMnemonicAt(0,KeyEvent.VK_G);
    tabbedPane.setMnemonicAt(1,KeyEvent.VK_L); 
  }
  public void setFocus() {
    nameTextField.requestFocusInWindow();
  }
  /**
   * このフォームに入力されたデータをNatalオブジェクトとして返す。
   * なお入力フォームに存在しないパラメター(ヒストリーやノート)は、未登録のまま
   * で返される。またNatalのChartTypeかならずNATALにセットされている。
   * @return　Natalオブジェクト
   */
  public Natal getNatal() {
    if(occ == null) occ = new Natal();
    occ.setChartType(Natal.COMPOSIT);
    occ.setName(nameTextField.getText().trim());
    occ.setKana(kanaTextField.getText().trim());
    occ.setMemo(memoTextField.getText().trim());
    occ.setJob(jobTextField.getText().trim());
    List<Transit> compositEvent = compositEditPanel.getEventList();
    occ.setComposit(compositEvent);
    return occ;
  }
  /**
   * 「名前、よみがな、性別、職業、メモ」と、日付、時刻、地名、緯度、経度、
   * タイムゾーンを各入力フィールドにセットする。
   */
  public void setNatal(Natal occ) {
    this.occ = occ;
    nameTextField.setText(occ.getName());
    kanaTextField.setText(occ.getKana());
    jobTextField.setText(occ.getJob());
    memoTextField.setText(occ.getMemo());
    compositEditPanel.setEventList(occ.getComposit());
  }
  /**
   * このDataTypePanelは少なくとも「名前」とコンポジットで２件のデータが登録され
   * ていれば、登録しても良いとみなしtrueを返す。
   * 満たされていないときはエラーメッセージをダイアログで表示したのちfalseを返す。
   */
  public boolean isCompletion() {
    String name = nameTextField.getText();
    int size = compositEditPanel.getEventList().size();
    if(name == null) name = "";
    if(name.equals("")) {
      tabbedPane.setSelectedIndex(0);
      JOptionPane.showMessageDialog(this,"名前の入力が必要です。"
        ,"コンポジットデータの入力",JOptionPane.ERROR_MESSAGE);
      return false;
    }
    if(size <= 1) {
      tabbedPane.setSelectedIndex(1);
      JOptionPane.showMessageDialog(this,"最低でも二件のリストが必要です。"
        ,"コンポジットデータの入力",JOptionPane.ERROR_MESSAGE);
      return false;      
    }
    return true;
  }
  public void addKeyListener(KeyListener l) {
    jobSelectButton.addKeyListener(l);
    jobTextField.addKeyListener(l);
    kanaTextField.addKeyListener(l);
    memoTextField.addKeyListener(l);
    nameTextField.addKeyListener(l);
    compositEditPanel.addKeyListener(l);
  }
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc=" Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;
    javax.swing.JLabel jobLabel;
    javax.swing.JLabel kanaLabel;
    javax.swing.JLabel memoLabel;
    javax.swing.JLabel nameLabel;

    tabbedPane = new javax.swing.JTabbedPane();
    parsonPanel = new javax.swing.JPanel();
    nameLabel = new javax.swing.JLabel();
    nameTextField = new javax.swing.JTextField();
    kanaLabel = new javax.swing.JLabel();
    kanaTextField = new javax.swing.JTextField();
    memoLabel = new javax.swing.JLabel();
    memoTextField = new javax.swing.JTextField();
    jobLabel = new javax.swing.JLabel();
    jobTextField = new javax.swing.JTextField();
    jobSelectButton = new javax.swing.JButton();

    setLayout(new java.awt.GridLayout(1, 0));

    setBorder(javax.swing.BorderFactory.createEmptyBorder(8, 8, 8, 1));
    setName("\u30b3\u30f3\u30dd\u30b8\u30c3\u30c8");
    parsonPanel.setLayout(new java.awt.GridBagLayout());

    nameLabel.setText("\u540d\u524d");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 3);
    parsonPanel.add(nameLabel, gridBagConstraints);

    nameTextField.setColumns(12);
    parsonPanel.add(nameTextField, new java.awt.GridBagConstraints());

    kanaLabel.setText("\u306a\u307e\u3048");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 3);
    parsonPanel.add(kanaLabel, gridBagConstraints);

    kanaTextField.setColumns(12);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    parsonPanel.add(kanaTextField, gridBagConstraints);

    memoLabel.setText("\u30e1\u30e2");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 3);
    parsonPanel.add(memoLabel, gridBagConstraints);

    memoTextField.setColumns(12);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 2;
    parsonPanel.add(memoTextField, gridBagConstraints);

    jobLabel.setText("\u8077\u696d");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 3);
    parsonPanel.add(jobLabel, gridBagConstraints);

    jobTextField.setColumns(12);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 4;
    parsonPanel.add(jobTextField, gridBagConstraints);

    jobSelectButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/job.png")));
    jobSelectButton.setMnemonic('J');
    jobSelectButton.setToolTipText("\u8077\u696d\u30ea\u30b9\u30c8\u304b\u3089\u9078\u629e");
    jobSelectButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
    jobSelectButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jobSelectButtonActionPerformed(evt);
      }
    });

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 4;
    parsonPanel.add(jobSelectButton, gridBagConstraints);

    tabbedPane.addTab("\u30b0\u30eb\u30fc\u30d7\u540d(G)", parsonPanel);

    add(tabbedPane);

  }// </editor-fold>//GEN-END:initComponents

  private void jobSelectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jobSelectButtonActionPerformed
    String job = JobSelectDialog.showDialog(this);
    if(job != null) jobTextField.setText(job);
  }//GEN-LAST:event_jobSelectButtonActionPerformed
  
  
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton jobSelectButton;
  private javax.swing.JTextField jobTextField;
  private javax.swing.JTextField kanaTextField;
  private javax.swing.JTextField memoTextField;
  private javax.swing.JTextField nameTextField;
  private javax.swing.JPanel parsonPanel;
  private javax.swing.JTabbedPane tabbedPane;
  // End of variables declaration//GEN-END:variables
  
}
