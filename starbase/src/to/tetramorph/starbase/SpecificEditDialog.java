/*
 * SpecificEditDialog.java
 *
 * Created on 2007/02/20, 15:28
 */

package to.tetramorph.starbase;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import javax.swing.AbstractAction;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import to.tetramorph.starbase.lib.SpecificDialogOperations;
import to.tetramorph.starbase.widget.CustomizePanel;
import to.tetramorph.util.ParentWindow;
import to.tetramorph.util.Preference;

/**
 * モジュールのスキンの設定や計算条件の設定を行うカスタマイズパネルがはめ込まれる
 * ダイアログ。「設定の保存」、「保存せず適用」、「プレビュー」、「中止」のボタン
 * を持っており、ボタンが押されると、コンストラクタで引き渡されたリスナにそれを
 * 通達する。「設定の保存」はこのダイアログ内から、SpecificSaveDialogを開いて、
 * DBに保存する。
 * @author  大澤義鷹
 */
final class SpecificEditDialog extends JDialog implements SpecificDialogOperations {
    /** 「中止」ボタンが押されたことを表す */
    public static final int CANCELED = 0;
    /** 「プレビュー」ボタンが押された事を表す */
    public static final int PREVIEW = 1;
    /** 「保存適用」ボタンが押された事を表す */
    public static final int SAVE = 2;
    /** 「保存せず適用」ボタンが押された事を表す */
    public static final int USE = 3;
    int state = 0;
    Preference specPref = null;
    ChangeSpecificListener changeSpecListener;
    String confName;
    String className;
    CustomizePanel customizePanel;
    ModuleCustomizer custom;
    Preference prevPref;

    /**
     * @param parent 親となるフレーム(MainFrame)
     * @param specPref 設定プロパティ
     * @param confName 設定名
     * @param customizePanel 色設定パネル
     * @param className チャートモジュールのフルパッケージ名+クラス名
     * @param changeSpecListener このダイアログのプレビューや登録ボタンが押された
     * 際に、このダイアログが呼び出すリスナ
     */
    public SpecificEditDialog( java.awt.Frame parent,
                            Preference specPref,
                            String confName,
                            CustomizePanel customizePanel,
                            String className,
                            ChangeSpecificListener changeSpecListener,
                            ModuleCustomizer custom ) {
        super( parent, true );
        this.custom = custom;
        initComponents();
        this.specPref = specPref;
        this.changeSpecListener = changeSpecListener;
        setConfName( confName );
        this.className = className;
        this.customizePanel = customizePanel;
        customizePanel.setSpecificDialogOperations( this );
        customizePanel.setPreference( specPref );
        add(customizePanel,BorderLayout.CENTER);
        setTitle( custom.getProperty("customizeDialogTitle") );
        ParentWindow.setEscCloseOperation(this,new AbstractAction("了解") {
            public void actionPerformed(ActionEvent evt) {
                abortButtonActionPerformed(null);
            }
        });
        pack();
        setLocationRelativeTo(parent);
    }
    
    /** 
     * 保存終了か、プレビューか、中止かの状態を返す。
     */
    public int getState() {
        return state;
    }
    
    /** 
     * 編集中もしくは編集保存後の設定名を返す。
     */
    public String getConfName() {
        return confName;
    }
    
    /**
     * 設定名をダイアログ内のラベルにセットする。
     */
    public void setConfName( String name ) {
        confName = name;
        confNameLabel.setText(confName);
    }

    
    /**
     * プレビュー時の設定情報を返す。登録ボタンが押された場合は、コンストラクタで
     * 与えたPreferenceに値が書きこまれる。コンストラクタでPreferenceを受け取るのは
     * 設定パネルに設定情報を反映させるため。
     */
    public Preference getPreviewPreference() {
        return prevPref;
    }
    
    /**
     * 保存せず終了ボタンを押したことにする。
     */
    public void doClickUseButton() {
        customizePanel.getPreference(specPref);
        state = USE;
        if ( changeSpecListener != null ) 
            changeSpecListener.stateChanged(new ChangeEvent(this));
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        javax.swing.JLabel jLabel1;
        javax.swing.JPanel titlePanel;

        buttonPanel = new javax.swing.JPanel();
        saveButton = new javax.swing.JButton();
        useButton = new javax.swing.JButton();
        previewButton = new javax.swing.JButton();
        abortButton = new javax.swing.JButton();
        titlePanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        confNameLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        saveButton.setText("\u4fdd\u5b58\u9069\u7528");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(saveButton);

        useButton.setText("\u4fdd\u5b58\u305b\u305a\u9069\u7528");
        useButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(useButton);

        previewButton.setText("\u30d7\u30ec\u30d3\u30e5\u30fc");
        previewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previewButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(previewButton);

        abortButton.setText("\u4e2d\u6b62");
        abortButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abortButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(abortButton);

        getContentPane().add(buttonPanel, java.awt.BorderLayout.SOUTH);

        titlePanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel1.setText("\u8a2d\u5b9a\u540d\uff1a");
        titlePanel.add(jLabel1);

        confNameLabel.setText("jLabel2");
        titlePanel.add(confNameLabel);

        getContentPane().add(titlePanel, java.awt.BorderLayout.NORTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents
  //「保存せず適用」ボタン
  private void useButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useButtonActionPerformed
      customizePanel.getPreference(specPref);
      state = USE;
      if ( changeSpecListener != null ) 
          changeSpecListener.stateChanged( new ChangeEvent(this) );
      dispose();
  }//GEN-LAST:event_useButtonActionPerformed
  //「プレビュー」ボタン
  private void previewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previewButtonActionPerformed
      prevPref = new Preference();
      String [] errmsg = new String[1];
      if ( customizePanel.isCorrect( errmsg ) ) {
          customizePanel.getPreference( prevPref );
          state = PREVIEW;
          if ( changeSpecListener != null ) 
              changeSpecListener.stateChanged( new ChangeEvent(this) );
      } else {
          //設定にエラーがあるときはポップアップで通達
          JOptionPane.showMessageDialog( this, errmsg[0], "設定エラー",
                                                    JOptionPane.ERROR_MESSAGE );
      }
  }//GEN-LAST:event_previewButtonActionPerformed
  //「保存して適用」ボタン　ダイアログの設定値がColorDataに引き渡されるところ
  private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
      String [] errmsg = new String[1];
      if ( customizePanel.isCorrect( errmsg ) ) {
          Preference pref = new Preference(); //保存中止の場合もあるので複製を作る
          pref.copy(specPref);
          customizePanel.getPreference(pref); //設定パネルの内容を取得
          String n = SpecificSaveDialog
              .showDialog( this, className, pref, confName, custom );
          if ( n != null ) {
              state = SAVE;
              confName = n;
              //保存に成功したらspecPrefを正式に書き換える
              customizePanel.getPreference( specPref ); 
              if ( changeSpecListener != null ) 
                  changeSpecListener.stateChanged( new ChangeEvent(this) );
              dispose();
          }
      } else {
          //設定にエラーがあるときはポップアップで通達。dispose()しない。
          JOptionPane.showMessageDialog( this, errmsg[0], "設定エラー",
                                                     JOptionPane.ERROR_MESSAGE);
      }
  }//GEN-LAST:event_saveButtonActionPerformed
  //中止ボタン
  private void abortButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abortButtonActionPerformed
      state = CANCELED;
      customizePanel.setPreference( specPref ); //最初に与えられた設定を書き戻す
      if ( changeSpecListener != null ) 
          changeSpecListener.stateChanged( new ChangeEvent( this ) );
      dispose();
  }//GEN-LAST:event_abortButtonActionPerformed
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton abortButton;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JLabel confNameLabel;
    private javax.swing.JButton previewButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JButton useButton;
    // End of variables declaration//GEN-END:variables
  
}
