/*
 * ZzRecalc.java
 *
 * Created on 2007/02/10, 23:47
 */
package to.tetramorph.starbase;

import java.io.File;
import java.io.IOException;
import java.io.PrintStream;
import java.net.MalformedURLException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import to.tetramorph.util.Preference;

/**
 * データベースの天体位置を再計算するRecalculationDialogの動作テスト。
 * RecalculationDialogはstatic変数を通してHSQLDBのUPDATEの進行状況を監視するため
 * 同じバーチャルマシン上でHSQLDBが動作していないと監視することができない。
 * のそたのこのテストプログラムでは、動作開始に先立ってHSQLDBを起動する。
 */
class ZzRecalc extends javax.swing.JFrame {
    //static RecalculationDialog dialog;

    /**
     * Creates new form ZzRecalc
     */
    public ZzRecalc() {
        initComponents();
        //dialog = new RecalculationDialog(this);
    }

    static void createAndShowGUI() {
//    Database db = Database.getInstance();
//    Properties p = db.getProperties("Default");
//    if(p.size() == 0) { //DBにデフォルトプロパティが無いなら登録
//      //システムプロパティにデフォルト値をセット
//      PreferencePanel.getDefault(System.getProperties());
//      db.setProperties("Default",System.getProperties());
//    } else {
//      ((Preference)System.getProperties()).copy(p);
//    }
        System.out.println("DefaultTime = " + System.getProperty("DefaultTime"));
        new ZzRecalc().setVisible(true);
    }
    //データベースを起動する。二重起動は禁止。

    static void init() throws MalformedURLException {
        //元のプロパティを継承し新しいこのアプリ専用のプロパティをセット
        //普段はPropertiesとして使えるし、高度な機能が欲しいときはPreferenceにキャスト
        //して使う。
        Preference pref = new Preference(System.getProperties());
        System.setProperties(pref);
        //DBや検索結果の窓を別フレームにするときはtrueをセット。一体型はfalse。
        System.setProperty("SeparateMode", "false");

        //JDBC をロードする
        try {
            Class.forName("org.hsqldb.jdbcDriver");
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
        if (System.getProperty("nodb") == null) {
            //本番モード
            //DBに接続してみるがこの段階でDBが起動してれば二重起動なので終わる。
            boolean doubleBoot = false;
            try {
                String driverURL = "jdbc:hsqldb:hsql://localhost";
                Connection con = DriverManager.getConnection(driverURL);
                doubleBoot = true;
            } catch (SQLException e) {
            }
            if (doubleBoot) {
                JOptionPane.showMessageDialog(null, "二重起動はできません。", "StarBase",
                        JOptionPane.ERROR_MESSAGE);
                System.out.println("二重起動はできません。");
                System.exit(0);
            }
            //標準出力をすげ替え、エラー情報等をlog.txtに出力するようにする。
            try {
                PrintStream ps = new PrintStream( new File(
                        System.getProperty("app.home"), "log.txt"), "sjis");
                System.setOut(ps);
                System.setErr(ps);
            } catch (IOException e) {
                e.printStackTrace();
            }
            //HSQLDBを起動
            String dbfile = null;
            //dbfile = Home.database.toURI().toURL().toString();
            dbfile = "file:" + new File(
                    System.getProperty("app.database")).toURI().getPath();

            //dbfile = Home.database.toURI().toURL().toString();
            org.hsqldb.Server.main(new String[]{"-database.0", dbfile, "-dbname.0", ""});
        }
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                createAndShowGUI();
            }
        });
    }
    //DBを起動せずダイアログ開閉の動作テストのときに使用する。

    static void create() {
        new ZzRecalc().setVisible(true);
    }
    //テスト

    public static void main(String[] args) throws MalformedURLException {
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                try {
                    init();
                } catch (MalformedURLException e) {
                    e.printStackTrace();
                }
                //create();
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
  // <editor-fold defaultstate="collapsed" desc=" Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    jButton1 = new javax.swing.JButton();

    getContentPane().setLayout(new java.awt.FlowLayout());

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    jButton1.setText("TEST");
    jButton1.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton1ActionPerformed(evt);
      }
    });

    getContentPane().add(jButton1);

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
      RecalculationDialog.showDialog(this);
//    java.awt.EventQueue.invokeLater(new Runnable() {
//      public void run() { dialog.setVisible(true); }
//    });
//    dialog.start();
  }//GEN-LAST:event_jButton1ActionPerformed
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton jButton1;
  // End of variables declaration//GEN-END:variables
}
