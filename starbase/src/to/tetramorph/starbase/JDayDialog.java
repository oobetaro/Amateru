/*
 * JDayDialog.java
 *
 * Created on 2007/01/23, 4:05
 */

package to.tetramorph.starbase;

import to.tetramorph.starbase.util.WindowMoveHandler;
import java.awt.Dialog;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.TimeZone;
import javax.swing.JButton;
import javax.swing.JFrame;
import to.tetramorph.tzdialog.TimeZoneDialog;
import to.tetramorph.starbase.formatter.FormatterFactory;
import to.tetramorph.starbase.formatter.LimitedDocument;
import to.tetramorph.starbase.formatter.GregorianDateFormatter;
import to.tetramorph.starbase.formatter.TimeFormatter;
import to.tetramorph.starbase.formatter.TimeZoneFormatter;
import static java.util.GregorianCalendar.*;
import javax.swing.AbstractAction;
import to.tetramorph.time.DateFormat;
import to.tetramorph.time.JDay;
import to.tetramorph.util.ParentWindow;
/**
 * ユリウス日とグレゴリオ暦を相互変換する計算機。
 * デバッグの際に時々必要になって、そのたびにテストコードを書いて計算するのが
 * おっくうなので用意した。
 */
class JDayDialog extends javax.swing.JDialog {
    GregorianCalendar cal = new GregorianCalendar();
    /**
     * オブジェクトを作成する。作成後setVisible()で可視化して使用する。
     */
    public JDayDialog(java.awt.Frame parent) {
        super(parent, false);
        initComponents();
        timeFTextField.setFormatterFactory(
            new FormatterFactory(new TimeFormatter()));
        timeFTextField.setDocument(new LimitedDocument(12));
        dateFTextField.setFormatterFactory(
            new FormatterFactory(new GregorianDateFormatter(timeFTextField)));
        dateFTextField.setDocument(new LimitedDocument(13+13));
        timezoneFTextField.setFormatterFactory(
            new FormatterFactory(new TimeZoneFormatter()));
        setCalendar(cal);
        //setKeyListener();
        ParentWindow.setEscCloseOperation(this,new AbstractAction() {
            public void actionPerformed(ActionEvent evt) {
                close();
            }
        });
        WindowMoveHandler winmove = 
            new WindowMoveHandler("JDayDialog.BOUNDS", this);
        setLocationRelativeTo(parent);
        pack();
    }
    void setCalendar(GregorianCalendar cal) {
        timezoneFTextField.setValue(cal.getTimeZone());
    }
//  void setKeyListener() {
//    KeyListener l = new KeyAdapter() {
//      public void keyPressed(KeyEvent e) {
//        int code = (int)e.getKeyChar();
//        //クローズボタンの処理でdispose()を実行
//        if(code == KeyEvent.VK_ESCAPE) close();
//      }
//    };
//    answerTextField.addKeyListener(l);
//    dateFTextField.addKeyListener(l);
//    gregToJDayButton.addKeyListener(l);
//    jdayTextField.addKeyListener(l);
//    jdayToGregButton.addKeyListener(l);
//    timeFTextField.addKeyListener(l);
//    timezoneFTextField.addKeyListener(l);
//    zoneButton.addKeyListener(l);
//  }
    void close() { dispose(); }
    
    static Dialog dialog = null;
    private static void createAndShowGUI() {
        final JFrame frame = new JFrame();
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setLayout(new FlowLayout());
        JButton button = new JButton("OPEN");
        button.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                dialog = new JDayDialog(frame);
                dialog.setVisible(true);
            }
        });
        frame.add(button);
        frame.pack();
        frame.setVisible(true);
    }
    /**
     * テスト
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                createAndShowGUI();
            }
        });
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        javax.swing.JPanel jPanel2 = new javax.swing.JPanel();
        answerTextField = new javax.swing.JTextField();
        javax.swing.JPanel jPanel1 = new javax.swing.JPanel();
        javax.swing.JLabel zoneLabel = new javax.swing.JLabel();
        timezoneFTextField = new javax.swing.JFormattedTextField();
        zoneButton = new javax.swing.JButton();
        javax.swing.JLabel jLabel6 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        gregorianPanel = new javax.swing.JPanel();
        javax.swing.JLabel jLabel1 = new javax.swing.JLabel();
        jdayTextField = new javax.swing.JTextField();
        jdayToGregButton = new javax.swing.JButton();
        julianPanel = new javax.swing.JPanel();
        javax.swing.JLabel jLabel5 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel2 = new javax.swing.JLabel();
        dateFTextField = new javax.swing.JFormattedTextField();
        javax.swing.JLabel jLabel3 = new javax.swing.JLabel();
        timeFTextField = new javax.swing.JFormattedTextField();
        gregToJDayButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("ユリウス計算機");
        setResizable(false);
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        jPanel2.setLayout(new java.awt.GridBagLayout());

        answerTextField.setColumns(14);
        answerTextField.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 4, 0);
        jPanel2.add(answerTextField, gridBagConstraints);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        zoneLabel.setText("時差");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel1.add(zoneLabel, gridBagConstraints);

        timezoneFTextField.setColumns(10);
        timezoneFTextField.setEditable(false);
        timezoneFTextField.setFocusable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel1.add(timezoneFTextField, gridBagConstraints);

        zoneButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/jisa.png"))); // NOI18N
        zoneButton.setMnemonic('Z');
        zoneButton.setToolTipText("世界のタイムゾーンを選択");
        zoneButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        zoneButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoneButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 2, 1, 0);
        jPanel1.add(zoneButton, gridBagConstraints);

        jLabel6.setText("<html><b>タイムゾーンの設定</b></html>");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel1.add(jLabel6, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        jPanel2.add(jPanel1, gridBagConstraints);

        jTabbedPane1.setFont(new java.awt.Font("MS UI Gothic", 0, 10)); // NOI18N

        gregorianPanel.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("ユリウス日");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        gregorianPanel.add(jLabel1, gridBagConstraints);

        jdayTextField.setColumns(14);
        jdayTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jdayTextFieldKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        gregorianPanel.add(jdayTextField, gridBagConstraints);

        jdayToGregButton.setText("変換");
        jdayToGregButton.setToolTipText("Enterキー");
        jdayToGregButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jdayToGregButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        gregorianPanel.add(jdayToGregButton, gridBagConstraints);

        jTabbedPane1.addTab("グレゴリオ暦に変換", gregorianPanel);

        julianPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(16, 16, 16, 16));
        julianPanel.setLayout(new java.awt.GridBagLayout());

        jLabel5.setText("グレゴリオ暦");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 2);
        julianPanel.add(jLabel5, gridBagConstraints);

        jLabel2.setText("年月日");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        julianPanel.add(jLabel2, gridBagConstraints);

        dateFTextField.setColumns(10);
        dateFTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                dateFTextFieldKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        julianPanel.add(dateFTextField, gridBagConstraints);

        jLabel3.setText("時刻");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        julianPanel.add(jLabel3, gridBagConstraints);

        timeFTextField.setColumns(10);
        timeFTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                timeFTextFieldKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        julianPanel.add(timeFTextField, gridBagConstraints);

        gregToJDayButton.setText("変換");
        gregToJDayButton.setToolTipText("Enterキー");
        gregToJDayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gregToJDayButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        julianPanel.add(gregToJDayButton, gridBagConstraints);

        jTabbedPane1.addTab("ユリウス日に変換", julianPanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel2.add(jTabbedPane1, gridBagConstraints);

        getContentPane().add(jPanel2);

        pack();
    }// </editor-fold>//GEN-END:initComponents
  
  private void timeFTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_timeFTextFieldKeyTyped
      int code = (int)evt.getKeyChar();
      if(code == KeyEvent.VK_ENTER) gregToJDayButton.doClick();
  }//GEN-LAST:event_timeFTextFieldKeyTyped
  
  private void dateFTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dateFTextFieldKeyTyped
      int code = (int)evt.getKeyChar();
      if(code == KeyEvent.VK_ENTER) gregToJDayButton.doClick();
  }//GEN-LAST:event_dateFTextFieldKeyTyped
  
  private void jdayTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jdayTextFieldKeyTyped
      int code = (int)evt.getKeyChar();
      if(code == KeyEvent.VK_ENTER) jdayToGregButton.doClick();
  }//GEN-LAST:event_jdayTextFieldKeyTyped
  //グレゴリオ暦→ユリウス日への計算ボタン
  private void gregToJDayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gregToJDayButtonActionPerformed
      GregorianCalendar gcal = (GregorianCalendar)dateFTextField.getValue();
      if(gcal == null) {
          answerTextField.setText("エラー : 日付が空");
          return;
      }
//    int y = gcal.get(YEAR);
//    int m = gcal.get(MONTH);
//    int d = gcal.get(DAY_OF_MONTH);
//    int era = gcal.get(ERA);
//    int hh = 0, mm = 0, ss = 0;
//    GregorianCalendar c = (GregorianCalendar)timeFTextField.getValue();
//    c.set(MILLISECOND,0);
//    if(timeFTextField.getValue() != null) {
//      hh = c.get(HOUR_OF_DAY);
//      mm = c.get(MINUTE);
//      ss = c.get(SECOND);
//    }
//    String z = cal.getTimeZone().getID();
//    System.out.printf("%d-%d-%d %d:%d:%d %s\n",y,m,d,hh,mm,ss,z);
//    answerTextField.setText("" + JDay.get(era,y,m,d,hh,mm,ss,cal.getTimeZone()) );
      
      // 時刻情報を結合
      GregorianCalendar temp = new GregorianCalendar(cal.getTimeZone());
      temp.set(Calendar.MILLISECOND,0);
      GregorianCalendar c = (GregorianCalendar)timeFTextField.getValue();
      temp.set(gcal.get(YEAR),gcal.get(MONTH),gcal.get(DAY_OF_MONTH));
      temp.set(ERA,gcal.get(ERA));
      if(timeFTextField.getValue() == null) {
          temp.set(Calendar.HOUR_OF_DAY,0);
          temp.set(Calendar.MINUTE,0);
          temp.set(Calendar.SECOND,0);
      } else {
          temp.set(Calendar.HOUR_OF_DAY,c.get(Calendar.HOUR_OF_DAY));
          temp.set(Calendar.MINUTE,c.get(Calendar.MINUTE));
          temp.set(Calendar.SECOND,c.get(Calendar.SECOND));
      }
      answerTextField.setText("" + JDay.get(temp) );
      System.out.println(DateFormat.getDateString(temp));
      
  }//GEN-LAST:event_gregToJDayButtonActionPerformed
  //ユリウス暦→グレゴリオ暦への計算ボタン
  private void jdayToGregButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jdayToGregButtonActionPerformed
      double jd = 0d;
      String value = jdayTextField.getText().trim();
      if(value.equals("")) {
          answerTextField.setText("エラー : 値が空");
          return;
      }
      try {
          jd = Double.parseDouble(value);
      } catch (NumberFormatException e) {
          answerTextField.setText("エラー : 変換できない文字列");
          return;
      }
      //GregorianCalendar gcal = JDay.getCalendar(jd,cal.getTimeZone());
      answerTextField.setText( DateFormat.getDateString(jd,cal.getTimeZone()));
      
//    gcal.setTime(SweDate.getDate(jd));
//    String era = "";
//    int val = gcal.get(GregorianCalendar.ERA);
//    if(val == GregorianCalendar.AD) era = "AD";
//    else if(val == GregorianCalendar.BC) era = "BC";
//    answerTextField.setText(String.format("%s %tY-%tm-%td %tT\n",era,gcal,gcal,gcal,gcal));
  }//GEN-LAST:event_jdayToGregButtonActionPerformed
  
  private void zoneButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoneButtonActionPerformed
      TimeZone tz = TimeZoneDialog.showDialog(this);
      if(tz == null) return;
      cal.setTimeZone(tz);
      setCalendar(cal);
  }//GEN-LAST:event_zoneButtonActionPerformed
  
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField answerTextField;
    private javax.swing.JFormattedTextField dateFTextField;
    private javax.swing.JButton gregToJDayButton;
    private javax.swing.JPanel gregorianPanel;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jdayTextField;
    private javax.swing.JButton jdayToGregButton;
    private javax.swing.JPanel julianPanel;
    private javax.swing.JFormattedTextField timeFTextField;
    private javax.swing.JFormattedTextField timezoneFTextField;
    private javax.swing.JButton zoneButton;
    // End of variables declaration//GEN-END:variables
  
}
