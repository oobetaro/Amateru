/*
 * WordBalloonPreferencePanel.java
 * Created on 2011/08/02, 3:51:07.
 */

/*
 * WordBalloonPreferencePanel.java
 *
 * Created on 2011/08/02, 3:51:07
 */
package to.tetramorph.starbase;

import java.awt.Color;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.Point;
import javax.swing.BorderFactory;
import javax.swing.JColorChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.border.Border;
import javax.swing.border.CompoundBorder;
import to.tetramorph.fontchooser.FontChooser;
import to.tetramorph.starbase.widget.WordBalloon;
import to.tetramorph.starbase.widget.WordBalloonHandler;
import to.tetramorph.util.Preference;

/**
 * ワードバルーンの配色、フォント、表示時間を設定するパネル。
 * @author ohsawa
 */
public class WordBalloonPreferencePanel extends PreferencePanel implements WordBalloonHandler {

    Color borderColor = Color.BLACK;

    Object button = null;
    WordBalloon wb;
    Preference tempPref = null;


    /** Creates new form WordBalloonPreferencePanel */

    public WordBalloonPreferencePanel() {
        initComponents();
        Preference pref = WordBalloon.getPreference();
        borderColor = pref.getColor( "WordBalloon.border");
        Border bdr = new CompoundBorder(
                    BorderFactory.createLineBorder( borderColor ),
                    BorderFactory.createEmptyBorder(8, 8, 8, 8));
        sampleLabel.setBorder( bdr );
        sampleLabel.setBackground( pref.getColor( "WordBalloon.background" ) );
        sampleLabel.setForeground( pref.getColor( "WordBalloon.foreground") );
        sampleLabel.setFont ( pref.getFont ( "WordBalloon.font") );
        timeSlider.setValue ( pref.getInteger( "WordBalloon.time" ) );
        wb = new WordBalloon(this);
        //selectFont = sampleLabel.getFont();
    }


    @Override
    public Object getSelectedObject() {
        return button;
    }
    /**
     * パルーンが表示し終わると呼び出される
     * @param o
     */
    @Override
    public void setSelectedObject(Object o) {
        button = o;
        WordBalloon.setPreference( tempPref );
        System.out.println("設定を書き戻した");
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        fontButton = new javax.swing.JButton();
        bgButton = new javax.swing.JButton();
        lineButton = new javax.swing.JButton();
        fontColorButton = new javax.swing.JButton();
        fontNameLabel = new javax.swing.JLabel();
        sampleLabel = new javax.swing.JLabel();
        timeSlider = new javax.swing.JSlider();
        javax.swing.JLabel jLabel2 = new javax.swing.JLabel();
        timeLabel = new javax.swing.JLabel();
        testButton1 = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("チャート内のフキダシ表示設定");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        add(jLabel1, gridBagConstraints);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        fontButton.setText("フォント");
        fontButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fontButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        jPanel1.add(fontButton, gridBagConstraints);

        bgButton.setText("背景色");
        bgButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bgButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        jPanel1.add(bgButton, gridBagConstraints);

        lineButton.setText("ボーダー線色");
        lineButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lineButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        jPanel1.add(lineButton, gridBagConstraints);

        fontColorButton.setText("文字色");
        fontColorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fontColorButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        jPanel1.add(fontColorButton, gridBagConstraints);

        fontNameLabel.setText("フォント名");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 5, 0);
        jPanel1.add(fontNameLabel, gridBagConstraints);

        sampleLabel.setText("表示サンプル");
        sampleLabel.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), javax.swing.BorderFactory.createEmptyBorder(8, 8, 8, 8)));
        sampleLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        sampleLabel.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 5, 0);
        jPanel1.add(sampleLabel, gridBagConstraints);

        timeSlider.setMajorTickSpacing(400);
        timeSlider.setMaximum(6000);
        timeSlider.setMinimum(1000);
        timeSlider.setPaintTicks(true);
        timeSlider.setValue(1900);
        timeSlider.setPreferredSize(new java.awt.Dimension(100, 35));
        timeSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                timeSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        jPanel1.add(timeSlider, gridBagConstraints);

        jLabel2.setText("表示時間");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        jPanel1.add(jLabel2, gridBagConstraints);

        timeLabel.setText("3000 [ms]");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel1.add(timeLabel, gridBagConstraints);

        testButton1.setText("テスト");
        testButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel1.add(testButton1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        add(jPanel1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void fontButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fontButtonActionPerformed

        Font font = FontChooser.showDialog(this, sampleLabel.getFont() );
        if ( font != null ) {
            if ( font.getSize() <= 36 ) {
                sampleLabel.setFont(font);
                return;
            }
            JOptionPane.showMessageDialog( this,
                    "フォントサイズが大きすぎます", "エラー",
                    JOptionPane.ERROR_MESSAGE );
        }

    }//GEN-LAST:event_fontButtonActionPerformed

    private void fontColorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fontColorButtonActionPerformed
        Color color = JColorChooser.showDialog(this, "文字色の選択", sampleLabel.getForeground() );
        if ( color != null ) {
            sampleLabel.setForeground( color );
        }
    }//GEN-LAST:event_fontColorButtonActionPerformed

    private void bgButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bgButtonActionPerformed
        Color color = JColorChooser.showDialog(this, "背景色の選択", sampleLabel.getForeground() );
        if ( color != null ) {
            sampleLabel.setBackground( color );
        }
    }//GEN-LAST:event_bgButtonActionPerformed

    private void lineButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lineButtonActionPerformed
        Color color = JColorChooser.showDialog(this, "ボーダー線色の選択", borderColor );
        if ( color != null ) {
            Border bdr = new CompoundBorder(
                        BorderFactory.createLineBorder( color ),
                        BorderFactory.createEmptyBorder(8, 8, 8, 8));
            sampleLabel.setBorder( bdr );
            borderColor = color;
        }
    }//GEN-LAST:event_lineButtonActionPerformed

    private void testButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testButton1ActionPerformed
        button = testButton1;
        Point p = new Point( testButton1.getBounds().x,
                             testButton1.getBounds().y);
        System.out.println(p);
        SwingUtilities.convertPointToScreen( p, jPanel1 );
        System.out.println(p);
        tempPref = WordBalloon.getPreference();

        Preference pref = new Preference();
        pref.setColor( "WordBalloon.border", borderColor );
        pref.setColor( "WordBalloon.background", sampleLabel.getBackground() );
        pref.setColor( "WordBalloon.foreground", sampleLabel.getForeground() );
        pref.setFont ( "WordBalloon.font", sampleLabel.getFont() );
        pref.setLong( "WordBalloon.time", (long)timeSlider.getValue() );
        WordBalloon.setPreference(pref);
        wb.show("<html><div style='width:120px'>"
                + "チャート上のシンボルをクリックしたときにこのように説明を"
                + "表示します。</div></html>", p);


    }//GEN-LAST:event_testButton1ActionPerformed

    private void timeSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_timeSliderStateChanged
        timeLabel.setText( timeSlider.getValue() + " [ms]" );
    }//GEN-LAST:event_timeSliderStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bgButton;
    private javax.swing.JButton fontButton;
    private javax.swing.JButton fontColorButton;
    private javax.swing.JLabel fontNameLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton lineButton;
    private javax.swing.JLabel sampleLabel;
    private javax.swing.JButton testButton1;
    private javax.swing.JLabel timeLabel;
    private javax.swing.JSlider timeSlider;
    // End of variables declaration//GEN-END:variables

    @Override
    public void regist() {
        Preference pref = new Preference();
        pref.setColor( "WordBalloon.border", borderColor );
        pref.setColor( "WordBalloon.background", sampleLabel.getBackground() );
        pref.setColor( "WordBalloon.foreground", sampleLabel.getForeground() );
        pref.setFont ( "WordBalloon.font", sampleLabel.getFont() );
        pref.setLong ( "WordBalloon.time", (long)timeSlider.getValue() );
        // バルーン表示中に登録ボタンが押されると登録処理は行われるが、バルーンが消えた
        // ときに表示前に退避していた設定がsetSelectedObject内で書き戻される。
        // 変更したはずなのに、変更が反映されない。(アマテルを立ち上げなおせば、
        // ファイルから読み直されるので変更はされているわけだが。)
        // かきもどされてもよいように、退避してある変数を新しいもので上書きする。
        tempPref = pref;
        button = null;
        WordBalloon.setPreference(pref);
        Config.usr.copy(pref);

    }

    public static void createAndShowGUI() {
        JFrame frame = new JFrame();
        if ( System.getProperty("os.name").indexOf("Windows") >= 0) {
            try {
            UIManager.setLookAndFeel(
                 "com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
            } catch ( Exception e ) { }
        }
        WordBalloonPreferencePanel panel = new WordBalloonPreferencePanel();
        JPanel empty = new JPanel();
        empty.setLayout(new GridLayout(0,1));
        empty.setBorder( BorderFactory.createEmptyBorder(10, 20, 10, 20));
        empty.add(panel);
        frame.setLayout(new GridLayout(0,1));
        frame.setTitle("ワードバルーンのテスト");
        frame.add(empty);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);

    }
    /**
     * 開発用にこのパネルだけを表示
     */
    public static void main( String [] args ) {
        java.awt.EventQueue.invokeLater( new Runnable() {
            @Override
            public void run() {
                createAndShowGUI();
            }
        });
    }

}
