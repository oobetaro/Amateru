/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SearchPanel.java
 *
 * Created on 2009/03/17, 7:01:10
 */

package to.tetramorph.starbase.dict;

import java.awt.Component;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.List;
import javax.swing.AbstractListModel;
import javax.swing.Icon;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.ListCellRenderer;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import to.tetramorph.util.IconLoader;

/**
 * 検索入力フォームと検索結果フォーム。
 * このクラスはpublicでないとNetBeansのGUIエディタでエラーになる。
 * 非公開クラスにしたいのだがGUIエディタの都合上仕方がない。
 * @author 大澤義鷹
 */
public class SearchPanel extends javax.swing.JPanel {
    static final Icon icon = IconLoader.getImageIcon("/resources/redball.png");
    Librarian lib = Librarian.getInstance();
    PageWriter pageWriter;
    String searchWord = "";

    /** Creates new form SearchPanel */
    public SearchPanel() {
        initComponents();
        jList.setCellRenderer( new CellRenderer() );
        jList.addListSelectionListener(new ListHandler());
        searchTextField.addKeyListener(new KeyHandler());
    }

    protected void setList( List<DictNode> list ) {
        jList.setModel( new ListModel(list) );
    }

    protected void setPageWriter(PageWriter pageWriter) {
        this.pageWriter = pageWriter;
    }

    private class ListModel extends AbstractListModel {
        List<DictNode> resultList = null;
        ListModel(List<DictNode> list) {
            resultList = list;
        }
        @Override
        public int getSize() {
            return resultList.size();
        }
        // indexにはJListが何番目の行のデータを必要としているかが入ってくる。
        @Override
        public Object getElementAt(int index) {
            return resultList.get(index);
        }
    }
    /**
     * 検索結果リストの選択アクションハンドラ
     */
    private class ListHandler implements ListSelectionListener {

        @Override
        public void valueChanged(ListSelectionEvent e) {
            DictNode node = (DictNode)jList.getSelectedValue();
            if ( e.getValueIsAdjusting() ) return;
            if ( node == null ) return;
            if ( searchWord.isEmpty() ) return;
            pageWriter.writePage(node, searchWord);
            //System.out.println("SearchResult Sel = " + node.getTitle());
        }

    }

    private class KeyHandler extends KeyAdapter {

        @Override
        public void keyTyped(KeyEvent e) {
            if ( (int)e.getKeyChar() == KeyEvent.VK_ENTER ) {
                searchButtonActionPerformed(null);
            }
        }
    }

    /**
     * 見出しの先頭に●マークをつけて表示するセルレンダラ
     */
    private class CellRenderer extends JLabel implements ListCellRenderer {
        @Override
        public Component getListCellRendererComponent(
                JList list,
                Object value, // value to display
                int index, // cell index
                boolean isSelected, // is the cell selected
                boolean cellHasFocus) // the list and the cell have the focus
        {
            setText(value.toString());
            if (isSelected) {
                setBackground(list.getSelectionBackground());
                setForeground(list.getSelectionForeground());
            } else {
                setBackground(list.getBackground());
                setForeground(list.getForeground());
            }
            setIcon(icon);
            setIconTextGap(5); //アイコンをセットしないかぎり無効
            setOpaque(true);
            return this;
        }
    }

    public JList getJList() {
        return jList;
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        javax.swing.JPanel jPanel3 = new javax.swing.JPanel();
        searchTextField = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList = new javax.swing.JList();

        setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        jPanel3.add(searchTextField, gridBagConstraints);

        searchButton.setText("検索");
        searchButton.setMargin(new java.awt.Insets(2, 10, 2, 10));
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });
        jPanel3.add(searchButton, new java.awt.GridBagConstraints());

        add(jPanel3, java.awt.BorderLayout.NORTH);

        jList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(jList);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed

        String keyword = searchTextField.getText().trim();
        if ( keyword.isEmpty() ) return;
        searchWord = keyword;
        setList( lib.search( searchWord ) );
    }//GEN-LAST:event_searchButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList jList;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField searchTextField;
    // End of variables declaration//GEN-END:variables

}
