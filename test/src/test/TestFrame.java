/*
 * TestFrame.java
 *
 * Created on 2007/06/03, 15:17
 */

package to.tetramorph.starbase.chartparts;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.font.FontRenderContext;
import java.awt.font.TextLayout;
import java.awt.geom.AffineTransform;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Line2D;
import javax.swing.JPanel;

/**
 * 円周上に文字列を描くテスト。
 * プロポーショナルフォントを使うと文字間が不規則なので、円周上にならべると、
 * 文字同士がひっつきすぎたりして美しくない。またそれを無理に調節しようとしても
 * うまくいかない。うまい方法があるかもしれないが、それは多分、かなり手間がかかる
 * 方法を使わざるを得ないと思われる。
 * できるだけ等角フォントを使うのが一番良い方法だと思われる。
 * それからすべてのイタリック体は円周に配置すると、ひずんだ感じがして美しくない。
 * 全角文字は総じて無難な描画をみせる。
 * @author  大澤義鷹
 */
public class TestFrame extends javax.swing.JFrame {
  
  /** Creates new form TestFrame */
  public TestFrame() {
    initComponents();
    add(new Panel());
    pack();
  }
  //String title = "Transit Progress Natal Transit Progress Natal Transit Progress Natal Transit Progress Natal Transit Progress Natal";
  String title = "Transit Progress Natal";
  //String title = "NATAL TRANSIT PROGRESS NATAL TRANSIT PROGRESS NATAL TRANSIT PROGRESS NATAL TRANSIT PROGRESS ";
  //String title = "ネイタル　トランシット　プログレス　ネイタル　トランシット　プログレス　ネイタル　トランシット　プログレス　";
  //String title = "ＮＡＴＡＬ　ＴＲＡＮＳＩＴ　ＰＲＯＧＲＥＳＳ　ＮＡＴＡＬ　ＴＲＡＮＳＩＴ　ＰＲＯＧＲＥＳＳ　";
  Font font = new Font("DialogInput",Font.PLAIN,15); //タイプライタ文字,なかなか美しい(大文字小文字混在可能)
  //Font font = new Font("Monospaced",Font.PLAIN,13); //これも良い
  //Font font = new Font(null,Font.PLAIN,13);
  
  double diameter = 0.75;
  class Panel extends JPanel {
    Panel() {
      this.setPreferredSize(new Dimension(400,400));
    }
    
    public void paintComponent(Graphics graphics) {
      super.paintComponent(graphics);
      Graphics2D g = (Graphics2D)graphics;    
      g.setRenderingHint(
        RenderingHints.KEY_ANTIALIASING,
        RenderingHints.VALUE_ANTIALIAS_ON);
      Dimension size = getSize();
      double width = size.getWidth();
      double height = size.getHeight();
      double bpx = width /2;
      double bpy = height/2;
      double dw = diameter * Math.min(width,height);
      double circleLength = dw * Math.PI;
      double radius = dw / 2;
      FontRenderContext render = g.getFontRenderContext();
      //位置確認用の円を表示
      Ellipse2D ellipse = new Ellipse2D.Double(bpx - dw/2,bpy - dw/2,dw,dw);
      g.setColor(Color.RED);
      g.draw(ellipse);
      Line2D line1 = new Line2D.Double(width/2,0,width/2,height);
      Line2D line2 = new Line2D.Double(0,height/2,width,height/2);
      g.draw(line1);
      g.draw(line2);
      double titleWidth = new TextLayout(title,font,render).getAdvance();
      System.out.println("titleWidth = " + titleWidth);
      double centerOffset = titleWidth/2/circleLength * 360;
      //文字列titleを描画
      char [] chars = title.toCharArray();
      double plotAngle =  270; //描画開始角 (0度ならおひつじ0度)
      double midOffset = 0;
      TextLayout [] textLayouts = new TextLayout[chars.length];
      double [] angles = new double[chars.length];
      for(int i=chars.length - 1; i>=0; i--) {
        textLayouts[i] = new TextLayout("" + chars[i], font, render);
        midOffset += textLayouts[i].getAdvance() / circleLength * 360;
        angles[i] = midOffset;
      }
      midOffset /= 2;
      for(int i=textLayouts.length - 1; i>=0; i--) {
        double a = -(angles[i] - midOffset + plotAngle +180); //反時計まわりの獣帯座標に変換
        float txw = textLayouts[i].getAdvance();
        AffineTransform at = new AffineTransform();
        at.rotate((a+90) * Math.PI/180, txw / 2f, 0); 
        Shape s = textLayouts[i].getOutline(at);
        //回転した文字を円周上に移動
        AffineTransform at2 = new AffineTransform();
        double x = Math.cos( a * Math.PI/180 ) * radius + bpx;
        double y = Math.sin( a * Math.PI/180 ) * radius + bpy;
        at2.translate( x - txw / 2f, y);
        s = at2.createTransformedShape(s);
        g.setPaint(Color.BLACK);
        g.fill(s);
      }
    }
  }
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc=" Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    getContentPane().setLayout(new java.awt.GridLayout());

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    pack();
  }// </editor-fold>//GEN-END:initComponents
  
  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    java.awt.EventQueue.invokeLater(new Runnable() {
      public void run() {
        new TestFrame().setVisible(true);
      }
    });
  }
  
  // Variables declaration - do not modify//GEN-BEGIN:variables
  // End of variables declaration//GEN-END:variables
  
}
