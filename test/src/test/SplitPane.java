/*
 * SplitPane.java
 *
 * Created on 2006/12/03, 12:07
 */

package to.tetramorph.starbase;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Graphics;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JLabel;
import javax.swing.plaf.metal.MetalLookAndFeel;
import javax.swing.plaf.metal.MetalTheme;

/**
 * 時間制御部分とDesktopPaneを縦分割するオリジナルスプリッタ。
 * ワンタッチで開閉したり、左右のパネルを交換したりできる。
 * @author  大澤義鷹
 */
class SplitPane extends javax.swing.JPanel {
  
  public static final String LEFT = BorderLayout.WEST;
  public static final String RIGHT = BorderLayout.EAST;
  Component slaveComponent;
  //int sideCount = 0; //偶数ならSlaveパネルを右に、奇数なら左に
  int openCount = 0; //偶数ならSlaveパネル表示、奇数なら非表示

  Color hilightColor = Color.WHITE;
  Color bgColor = Color.LIGHT_GRAY;
  Color shadowColor = Color.DARK_GRAY;
  Color borderColor = Color.DARK_GRAY;
  Color borderColor2 = Color.WHITE;
  // 分割用の縦線
  class BorderLabel extends JLabel {
    BorderLabel() {
      super("");
    }
    public void paint(Graphics g) {
      MetalTheme theme = MetalLookAndFeel.getCurrentTheme();
      if(theme != null) {
        bgColor = theme.getWindowTitleBackground();
        shadowColor = theme.getPrimaryControlDarkShadow();
        hilightColor = theme.getControlHighlight();
      }
      Dimension rect = getSize();
      //背景色で塗りつぶし縁取り線を描いて浮き彫り風にする。
      g.setColor(bgColor);
      g.fillRect(0,0,rect.width-1,rect.height);
      g.setColor(borderColor);
      g.drawRect(0,0,rect.width-1,rect.height-1);
      g.setColor(borderColor2);
      g.draw3DRect(1, 1, rect.width-3, rect.height-3, true);
      //ザラザラした模様を描く
      int x=3;
      for(int y=0+2; y<rect.height-4+2; y+=4) {
        g.setColor(hilightColor);
        g.drawLine(x,y,x,y);
        g.drawLine(x+2,y+2,x+2,y+2);
        g.drawLine(x+4,y+4,x+4,y+4);
        g.setColor(shadowColor);
        g.drawLine(x+1,y+1,x+1,y+1);
        g.drawLine(x+3,y+3,x+3,y+3);
        g.drawLine(x+5,y+5,x+5,y+5);
      }
    }
  }

  /** 
   * Creates new form SplitPane 
   */
  public SplitPane() {
    initComponents();
    buttonPanel.add(new BorderLabel(),BorderLayout.CENTER);
  }
  /**
   * マスターコンポーネントをセットする。JDesktopPaneをセットする用途以外想定
   * していない。一度セットしたあとそれを削除することも想定していない。
   */
  public void setMasterComponent(Component component) {
    add(component,BorderLayout.CENTER);
    validate();
    repaint();
  }
  /**
   * スレーブコンポーネントをセットする。前にセットされていたコンポーネントは
   * 抜き取られる。TimePanelをセットする用途以外想定していないが、他のパネルを
   * セットしてもおそらく正しく動作するはず。nullをセットすると、コンポーネント
   * はリムーブされ消去される。
   */
  public void setSlaveComponent(Component component) {
    this.slaveComponent = component;
    if(component == null) remove(slavePanel);
    else setExpansion(visibleCheckBoxMenuItem.isSelected());
    validate();
    repaint();
  }
  /**
   * Slaveパネルを開く/閉じる
   * @param visible trueなら開く、falseなら閉じる。
   */
  void setExpansion(boolean visible) {
    openCount = visible ? 0 : 1;
    if(slaveComponent == null) return;
    if( visible ) {
      slavePanel.removeAll();
      slavePanel.add(slaveComponent,BorderLayout.CENTER);
      String side = swapCheckBoxMenuItem.isSelected() ? LEFT : RIGHT;
      String s = swapCheckBoxMenuItem.isSelected() ? RIGHT : LEFT;
      slavePanel.add(buttonPanel,s);
      add(slavePanel,side);
    }
    else slavePanel.remove(slaveComponent);
    validate();
    repaint();
  }
  /**
   * Salaveパネル位置の左右交換
   * @param left trueなら左に、falseなら右にSlaveパネルを置く。
   */
  void swap(boolean left) {
    remove(slavePanel);
    slavePanel.remove(buttonPanel);
    String side =  left ? LEFT : RIGHT;
    String s = left ? RIGHT : LEFT;
    slavePanel.add(buttonPanel,s);
    add(slavePanel,side);
    validate();
    repaint();
  }
  /**
   * Slaveパネルの可視/非可視を切り替えるメニューアイテムを返す。
   */
  public JCheckBoxMenuItem getVisibleCheckBoxMenuItem() {
    return visibleCheckBoxMenuItem;
  }
  /**
   * パネルの左右入替メニューアイテムを返す。
   */
  public JCheckBoxMenuItem getSwapCheckBoxMenuItem() {
    return swapCheckBoxMenuItem;
  }
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc=" Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    javax.swing.JPanel buttonPanel0;
    java.awt.GridBagConstraints gridBagConstraints;

    slavePanel = new javax.swing.JPanel();
    buttonPanel = new javax.swing.JPanel();
    buttonPanel0 = new javax.swing.JPanel();
    openRadioButton = new javax.swing.JRadioButton();
    swapRadioButton = new javax.swing.JRadioButton();
    visibleCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
    swapCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();

    slavePanel.setLayout(new java.awt.BorderLayout());

    buttonPanel.setLayout(new java.awt.BorderLayout());

    buttonPanel0.setLayout(new java.awt.GridBagLayout());

    openRadioButton.setToolTipText("\u6642\u9593\u30d1\u30cd\u30eb\u958b\u9589");
    openRadioButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    openRadioButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/splitButton1.png")));
    openRadioButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
    openRadioButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/splitButton2.png")));
    openRadioButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        openRadioButtonActionPerformed(evt);
      }
    });

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
    buttonPanel0.add(openRadioButton, gridBagConstraints);

    swapRadioButton.setToolTipText("\u5de6\u53f3\u5165\u66ff");
    swapRadioButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    swapRadioButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/splitSwapButton1.png")));
    swapRadioButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
    swapRadioButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/splitSwapButton2.png")));
    swapRadioButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        swapRadioButtonActionPerformed(evt);
      }
    });

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
    buttonPanel0.add(swapRadioButton, gridBagConstraints);

    buttonPanel.add(buttonPanel0, java.awt.BorderLayout.NORTH);

    visibleCheckBoxMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_MASK));
    visibleCheckBoxMenuItem.setSelected(true);
    visibleCheckBoxMenuItem.setText("\u6642\u9593\u5236\u5fa1\u30d1\u30cd\u30eb");
    visibleCheckBoxMenuItem.setEnabled(false);
    visibleCheckBoxMenuItem.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        visibleCheckBoxMenuItemActionPerformed(evt);
      }
    });

    swapCheckBoxMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
    swapCheckBoxMenuItem.setText("\u6642\u9593\u30d1\u30cd\u30eb\u5de6\u53f3\u5165\u66ff");
    swapCheckBoxMenuItem.setActionCommand("\u6642\u9593\u30d1\u30cd\u30eb\u5de6\u53f3\u5165\u66ff");
    swapCheckBoxMenuItem.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        swapCheckBoxMenuItemActionPerformed(evt);
      }
    });

    setLayout(new java.awt.BorderLayout());

  }// </editor-fold>//GEN-END:initComponents
  // 左右交換/非交換メニューが操作されたとき
  private void swapCheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_swapCheckBoxMenuItemActionPerformed
// TODO add your handling code here:
    JCheckBoxMenuItem item = (JCheckBoxMenuItem)evt.getSource();
    System.out.println("Swap CheckBox = " + item.isSelected());
    swap(item.isSelected());
  }//GEN-LAST:event_swapCheckBoxMenuItemActionPerformed
  // 可視化/非可視化メニューが操作されたとき
  private void visibleCheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_visibleCheckBoxMenuItemActionPerformed
    JCheckBoxMenuItem item = (JCheckBoxMenuItem)evt.getSource();
    setExpansion(item.isSelected());
  }//GEN-LAST:event_visibleCheckBoxMenuItemActionPerformed
  // スワップボタンが押された時
  private void swapRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_swapRadioButtonActionPerformed
    swapCheckBoxMenuItem.setSelected(! swapCheckBoxMenuItem.isSelected());
    swap(swapCheckBoxMenuItem.isSelected());
  }//GEN-LAST:event_swapRadioButtonActionPerformed
  // オープンボタンが押された時
  private void openRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openRadioButtonActionPerformed
    openCount++;
    boolean v = ((openCount & 1) == 0) ? true : false;
    setExpansion(v);
    visibleCheckBoxMenuItem.setSelected(v);
  }//GEN-LAST:event_openRadioButtonActionPerformed
  
  
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JPanel buttonPanel;
  private javax.swing.JRadioButton openRadioButton;
  private javax.swing.JPanel slavePanel;
  private javax.swing.JCheckBoxMenuItem swapCheckBoxMenuItem;
  private javax.swing.JRadioButton swapRadioButton;
  private javax.swing.JCheckBoxMenuItem visibleCheckBoxMenuItem;
  // End of variables declaration//GEN-END:variables
  
}
