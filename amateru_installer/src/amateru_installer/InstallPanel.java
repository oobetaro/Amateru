/*
 * InstallPanel.java
 * Created on 2011/07/20, 21:38:08.
 */

/*
 * InstallPanel.java
 *
 * Created on 2011/07/20, 21:38:08
 */
package amateru_installer;

import javax.swing.JOptionPane;

/**
 * ファイルコピーの様子をプログレスバーとメッセージで表示するパネル。
 * プログレスリスナーとして、別スレッドで動作するInstallProcessから、
 * メッセージやプログレスバーの進行情報をうけとり表示する。
 *
 * インストールが成功したら次のページに移行して、MacやLinuxのアイコンの作り方を説明
 * したり、アンインストールの仕方について説明するのだが、まだ実装していない。
 * @author ohsawa
 */
class InstallPanel extends javax.swing.JPanel implements ProgressListener {
    InstallerFrame frame = null;
    /** Creates new form InstallPanel */
    public InstallPanel() {
        initComponents();
    }
    /**
     * インストール処理開始。このクラスのエントリー。
     * InstallProcessを起動する。
     */
    public void start() {
        Copy.setProgressListener(this);
        bar_value = 0;
        new Thread(new InstallThread(this)).start();

    }

    /* プログレスバーの値を実数で保管する変数 */

    double bar_value = 0;

    /**
     * プログレスバーをすすめる。
     * @param value プログレスバーに足し込む値
     */
    @Override
    public void addProgress( final double value ) {
        bar_value += value;
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                progressBar.setValue( (int)bar_value );
            }
        });
    }

//    /**
//     * コピー作業の経過メッセージをテキストエリアに表示する
//     * @param msg 表示するメッセージ
//     */
//    @Override
//    public void print( final String msg ) {
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            @Override
//            public void run() {
//                textArea.append( msg );
//            }
//        });
//    }
//
    /**
     * 削除処理中にテキストエリアにメッセージを表示する。
     * @param msg
     */
    @Override
    public void print( final String head, final String msg ) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                textArea.append( String.format( "%-15s%s%n", head, msg ) );
            }
        });
    }

    /**
     * プログレスバーの最大値を返す。
     */
    @Override
    public int getBarMaxValue() {
        return progressBar.getMaximum();
    }

    /**
     * エラーメッセージをダイアログで表示する。
     */
    @Override
    public void showErrorDialog( final String msg ) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                JOptionPane.showMessageDialog(
                        InstallPanel.this,
                        msg,
                        "インストールエラー",
                        JOptionPane.ERROR_MESSAGE );
            }
        });

    }
    /**
     * インストール処理が正常終了したときの処理を行う。
     */
    @Override
    public void installEnd() {
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                progressBar.setValue( progressBar.getMaximum() );
                textArea.append("■インストール完了\n");
                textArea.append("プログラムがインストールされた場所\n");
                textArea.append( Copy.env.get("PROGRAM") + "\n" );
                String text = ResourceLoader.getText("/resources/memo.txt", "UTF-8");
                textArea.append( text );
                finishButton.setEnabled(true);
            }
        });

    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.JPanel jPanel2 = new javax.swing.JPanel();
        finishButton = new javax.swing.JButton();
        javax.swing.JPanel jPanel3 = new javax.swing.JPanel();
        javax.swing.JPanel jPanel1 = new javax.swing.JPanel();
        progressBar = new javax.swing.JProgressBar();
        javax.swing.JScrollPane jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();

        setLayout(new java.awt.BorderLayout());

        finishButton.setMnemonic('Y');
        finishButton.setText("完了(Y)");
        finishButton.setEnabled(false);
        finishButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finishButtonActionPerformed(evt);
            }
        });
        jPanel2.add(finishButton);

        add(jPanel2, java.awt.BorderLayout.PAGE_END);

        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.Y_AXIS));

        progressBar.setMaximum(400);
        progressBar.setPreferredSize(new java.awt.Dimension(400, 14));
        jPanel1.add(progressBar);

        jPanel3.add(jPanel1, java.awt.BorderLayout.NORTH);

        textArea.setColumns(20);
        textArea.setEditable(false);
        textArea.setRows(5);
        jScrollPane1.setViewportView(textArea);

        jPanel3.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        add(jPanel3, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void finishButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finishButtonActionPerformed
        frame.exit();
    }//GEN-LAST:event_finishButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton finishButton;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JTextArea textArea;
    // End of variables declaration//GEN-END:variables
}
