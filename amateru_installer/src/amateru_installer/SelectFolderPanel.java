/*
 * SelectFolderPanel.java
 * Created on 2011/07/18, 13:43:26.
 */

/*
 * SelectFolderPanel.java
 *
 * Created on 2011/07/18, 13:43:26
 */
package amateru_installer;

import javax.swing.plaf.basic.BasicFileChooserUI;
import java.io.File;
import javax.swing.JFileChooser;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
/**
 * インストール先のフォルダを設定するパネル。
 * @author ohsawa
 */
class SelectFolderPanel extends javax.swing.JPanel {
    InstallerFrame frame = null;
    JFileChooser fc = new JFileChooser();
    JTextField [] textFields = null;
    // 出生データの置き場所、つまりUSR_HOMEの初期値を保管しておく変数。
    // 通常 APPHOMEとUSR_HOMEは同じ。
    String APPHOME;
    /** Creates new form SelectFolderPanel */
    public SelectFolderPanel() {
        initComponents();
        textFields = new JTextField[] {
            programTextField,epheTextField,natalTextField,
        };
        final String [] paths = new String[4];
        DefaultPath.getDefaultFolders( paths );

        final JButton [] selButtons = new JButton[] {
            jButton1,jButton2,jButton4,
        };

        MouseHandler mh = new MouseHandler();
        for ( JButton b : selButtons )
            b.addMouseListener(mh);

        java.awt.EventQueue.invokeLater( new Runnable() {
            @Override
            public void run() {
                for ( int i = 0; i < textFields.length; i++ )
                    textFields[i].setText( paths[i] );
            }
        });
        APPHOME = paths[2];
        osLabel.setText( "お使いの環境は"+OSType.getName() + "系プラットホームと認識しました。");
        if ( ! OSType.isWindows() ) {
            scutCheckBox.setSelected(false);
            scutCheckBox.setEnabled(false);
            textArea.setText("　ショートカットアイコンの作成はWindowsのみ対応して"
                    + "います。他のOSでは手作業で作成してください。"
                    + "やり方は後述します。"
                    + "　MacとLinuxの事情を作者が知らないので、てなもんやでパスを"
                    + "セットしています。OSのお作法に則った適切なパスの指定は"
                    + "ユーザにお任せします。" );
        } else {
            scutCheckBox.setSelected(true);
            scutCheckBox.setEnabled(true);
        }
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
    }

    String [] help = {
        "　アマテルの実行プログラム(jarファイル)の置き場所です。",

        "　スイスエフェメリスの天体暦ファイルの置き場所です。複数のユーザが共有できる"
            + "フォルダにインストールするのが望ましいです。",

        "ユーザが登録する出生データやユーザ固有の設定情報の置き場所です。"
            + "テンポラリファイルの置き場所としても使用されます。"
    };

    /* 設定ボタンにカーソルをのせると説明を表示する機能 */

    class MouseHandler extends MouseAdapter {
        @Override
        public void mouseEntered( MouseEvent e ) {
            int i = Integer.parseInt(
                    ((JButton)e.getSource()).getActionCommand() );
            textArea.setText( help[i] );
        }
        @Override
        public void mouseExited( MouseEvent e ) {
            int i = Integer.parseInt(
                    ((JButton)e.getSource()).getActionCommand() );
            textArea.setText("");
        }

    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        scutCheckBox = new javax.swing.JCheckBox();
        javax.swing.JLabel jLabel1 = new javax.swing.JLabel();
        programTextField = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        javax.swing.JLabel jLabel2 = new javax.swing.JLabel();
        epheTextField = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        javax.swing.JLabel jLabel4 = new javax.swing.JLabel();
        natalTextField = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        javax.swing.JLabel jLabel5 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel6 = new javax.swing.JLabel();
        javax.swing.JPanel jPanel1 = new javax.swing.JPanel();
        abortButton = new javax.swing.JButton();
        instButton = new javax.swing.JButton();
        osLabel = new javax.swing.JLabel();
        epheCheckBox = new javax.swing.JCheckBox();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        setLayout(new java.awt.GridBagLayout());

        scutCheckBox.setSelected(true);
        scutCheckBox.setText("デスクトップにショートカットを作成");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 8, 0);
        add(scutCheckBox, gridBagConstraints);

        jLabel1.setText("アマテル本体");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 8);
        add(jLabel1, gridBagConstraints);

        programTextField.setEditable(false);
        programTextField.setText("jTextField1");
        programTextField.setFocusable(false);
        programTextField.setPreferredSize(new java.awt.Dimension(250, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 8);
        add(programTextField, gridBagConstraints);

        jButton1.setText("設定");
        jButton1.setActionCommand("0");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        add(jButton1, gridBagConstraints);

        jLabel2.setText("天体暦");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 8);
        add(jLabel2, gridBagConstraints);

        epheTextField.setEditable(false);
        epheTextField.setText("jTextField2");
        epheTextField.setFocusable(false);
        epheTextField.setPreferredSize(new java.awt.Dimension(250, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 8);
        add(epheTextField, gridBagConstraints);

        jButton2.setText("設定");
        jButton2.setActionCommand("1");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        add(jButton2, gridBagConstraints);

        jLabel4.setText("出生データと設定");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 8);
        add(jLabel4, gridBagConstraints);

        natalTextField.setEditable(false);
        natalTextField.setText("jTextField4");
        natalTextField.setFocusable(false);
        natalTextField.setPreferredSize(new java.awt.Dimension(250, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 8);
        add(natalTextField, gridBagConstraints);

        jButton4.setText("設定");
        jButton4.setActionCommand("2");
        jButton4.setEnabled(false);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        add(jButton4, gridBagConstraints);

        textArea.setColumns(20);
        textArea.setEditable(false);
        textArea.setLineWrap(true);
        textArea.setRows(5);
        textArea.setFocusable(false);
        jScrollPane1.setViewportView(textArea);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(8, 0, 0, 0);
        add(jScrollPane1, gridBagConstraints);

        jLabel5.setText("説明");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(8, 0, 0, 0);
        add(jLabel5, gridBagConstraints);

        jLabel6.setFont(new java.awt.Font("MS UI Gothic", 0, 14));
        jLabel6.setText("<html>\nインストールするフォルダを指定してください。<br><br>\n</html>\n");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 8, 0);
        add(jLabel6, gridBagConstraints);

        abortButton.setMnemonic('N');
        abortButton.setText("中止(N)");
        abortButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abortButtonActionPerformed(evt);
            }
        });
        jPanel1.add(abortButton);

        instButton.setMnemonic('Y');
        instButton.setText("インストール(Y)");
        instButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                instButtonActionPerformed(evt);
            }
        });
        jPanel1.add(instButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        add(jPanel1, gridBagConstraints);

        osLabel.setFont(new java.awt.Font("MS UI Gothic", 0, 14));
        osLabel.setText("OSの系統");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 8, 0);
        add(osLabel, gridBagConstraints);

        epheCheckBox.setText("天体暦をインストールしない");
        epheCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                epheCheckBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(epheCheckBox, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        fc.setDialogTitle("プログラムファイルの置き場所");
        if ( OSType.isWindows() ) {
            fc.setSelectedFile( new File( programTextField.getText()) );
            fc.setSelectedFile( new File( "HogeHoge") );
            ((BasicFileChooserUI)fc.getUI()).setFileName( new File( programTextField.getText()).getName());
        }
        if ( fc.showDialog( this,"決定" ) == JFileChooser.APPROVE_OPTION ) {
            programTextField.setText( fc.getSelectedFile().getAbsolutePath() );
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        fc.setDialogTitle("天文暦の置き場所を決定");
        if ( OSType.isWindows() ) {
            fc.setSelectedFile( new File( epheTextField.getText()) );
            ((BasicFileChooserUI)fc.getUI()).setFileName( new File( epheTextField.getText()).getName());
        }
        if ( fc.showDialog( this,"決定" ) == JFileChooser.APPROVE_OPTION ) {
            epheTextField.setText( fc.getSelectedFile().getAbsolutePath() );
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        fc.setDialogTitle("出生データと設定の置き場所を決定");
        if ( OSType.isWindows() ) {
            fc.setSelectedFile( new File( natalTextField.getText()) );
            ((BasicFileChooserUI)fc.getUI()).setFileName( new File( natalTextField.getText()).getName());
        }
        if ( fc.showDialog( this,"決定" ) == JFileChooser.APPROVE_OPTION ) {
            natalTextField.setText( fc.getSelectedFile().getAbsolutePath() );
        }

    }//GEN-LAST:event_jButton4ActionPerformed

    private void abortButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abortButtonActionPerformed
        frame.exit();
    }//GEN-LAST:event_abortButtonActionPerformed

    private void instButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_instButtonActionPerformed
        for ( JTextField f : textFields ) {
            if ( f.getText().trim().isEmpty() ) {
                JOptionPane.showMessageDialog( this,
                        "未設定の項目があります", "設定エラー",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
        String [] env_values = { "PROGRAM","EPHE","USRHOME" };
        // 入力ボックスのパスを環境変数にセット
        for ( int i = 0; i < textFields.length; i++ ) {
            Copy.env.put( env_values[i],
                    textFields[i].getText().trim());
        }
        Copy.env.put("APPHOME", APPHOME);
        Copy.env.put("DESKTOP_SCUT", "" + scutCheckBox.isSelected() );
        Copy.env.put("HOME", System.getProperty("user.home"));
        Copy.env.put("NO_EPHE", "" + epheCheckBox.isSelected() );
        frame.selectCard( "install" );
    }//GEN-LAST:event_instButtonActionPerformed

    /**
     * 天体暦をインストールしないオプションを選択したタイミングで、それがすでに
     * 存在することを確認する。存在すればオプションを受理するが、しないときは、
     * エラーをつげてオプションを拒否する。
     */
    private void epheCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_epheCheckBoxActionPerformed
        if ( epheCheckBox.isSelected() ) {
            File dir = new File( epheTextField.getText() );
            int i = 0;
            if ( dir.exists() && dir.isDirectory() ) {
                File [] files = dir.listFiles();
                for ( File file : files ) {
                    if ( file.getName().endsWith(".se1") ) i++;
                }
            }
            // "*.se1"というファイルが10個以下(適当)なら違うと判定する
            if ( i < 10 ) {
                JOptionPane.showMessageDialog( this,
                        "天文暦ファイルのあるフォルダーを指定してください", "設定エラー",
                        JOptionPane.ERROR_MESSAGE );
                epheCheckBox.setSelected( false );
                return;
            }
        }
    }//GEN-LAST:event_epheCheckBoxActionPerformed
    /**
     * このパネルが可視化されたときインストールボタンにフォーカスを求める
     */
    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown

        instButton.requestFocusInWindow();

    }//GEN-LAST:event_formComponentShown

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton abortButton;
    private javax.swing.JCheckBox epheCheckBox;
    private javax.swing.JTextField epheTextField;
    private javax.swing.JButton instButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField natalTextField;
    private javax.swing.JLabel osLabel;
    private javax.swing.JTextField programTextField;
    private javax.swing.JCheckBox scutCheckBox;
    private javax.swing.JTextArea textArea;
    // End of variables declaration//GEN-END:variables
}
